{"version":3,"file":"index.js","mappings":"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","sources":["webpack://InversifyReact/webpack/universalModuleDefinition","webpack://InversifyReact/./src/hooks.ts","webpack://InversifyReact/./src/internal.ts","webpack://InversifyReact/./src/provider.tsx","webpack://InversifyReact/./src/resolve.ts","webpack://InversifyReact/external umd {\"commonjs\":\"react\",\"commonjs2\":\"react\",\"amd\":\"react\",\"root\":\"React\"}","webpack://InversifyReact/webpack/bootstrap","webpack://InversifyReact/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"InversifyReact\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"InversifyReact\"] = factory(root[\"React\"]);\n})((typeof self !== 'undefined' ? self : this), (__WEBPACK_EXTERNAL_MODULE__12__) => {\nreturn ","import { interfaces } from 'inversify';\nimport { useContext, useRef } from 'react';\n\nimport { InversifyReactContext } from './internal';\n\n/**\n * internal utility hook\n * @see https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily\n *\n * Q: why not `useMemo`?\n * A: it does not guarantee same instance\n * @see https://reactjs.org/docs/hooks-reference.html#usememo\n *\n * Q: why not `useState`?\n * A: it's possible to use state factory `useState(() => container.get(...))`,\n * but ref is probably slightly more optimal because it's not related to re-rendering\n * (which we don't need anyway)\n */\nfunction useLazyRef<T>(resolveValue: () => T): T {\n    const ref = useRef<{ v: T }>(null);\n    if (!ref.current) {\n        ref.current = { v: resolveValue() };\n    }\n    return ref.current.v;\n}\n\n/**\n * Resolves container or something from container (if you specify resolving function)\n */\nexport function useContainer(): interfaces.Container\nexport function useContainer<T>(resolve: (container: interfaces.Container) => T): T\nexport function useContainer<T>(resolve?: (container: interfaces.Container) => T): interfaces.Container | T {\n    const container = useContext(InversifyReactContext);\n    if (!container) {\n        throw new Error(\n            'Cannot find Inversify container on React Context. ' +\n            '`Provider` component is missing in component tree.'\n        );\n    }\n    return resolve\n        ? useLazyRef(() => resolve(container))\n        : container;\n}\n\n/**\n * Resolves injection by id (once, at first render).\n */\nexport function useInjection<T>(serviceId: interfaces.ServiceIdentifier<T>): T {\n    return useContainer(\n        container => container.get<T>(serviceId)\n    );\n}\n\n// overload with default value resolver;\n// no restrictions on default `D` (e.g. `D extends T`) - freedom and responsibility of \"user-land code\"\nexport function useOptionalInjection<T, D>(\n    serviceId: interfaces.ServiceIdentifier<T>,\n    // motivation:\n    // to guarantee that \"choosing the value\" process happens exactly once and\n    // to save users from potential bugs with naive `useOptionalInjection(...) ?? myDefault`;\n    // this callback will be executed only if binding is not found on container\n    resolveDefault: (container: interfaces.Container) => D\n): T | D;\n// overload without default value resolver\nexport function useOptionalInjection<T>(\n    serviceId: interfaces.ServiceIdentifier<T>\n): T | undefined;\n/**\n * Resolves injection if it's bound in container\n */\nexport function useOptionalInjection<T, D>(\n    serviceId: interfaces.ServiceIdentifier<T>,\n    resolveDefault: (container: interfaces.Container) => D | undefined = () => undefined\n): T | D | undefined {\n    return useContainer(\n        container => container.isBound(serviceId)\n            ? container.get(serviceId)\n            : resolveDefault(container)\n    );\n}\n\n/**\n * uses container.getAll(), works like @multiInject()\n * https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#containergetall\n * https://github.com/inversify/InversifyJS/blob/master/wiki/multi_injection.md\n */\nexport function useAllInjections<T>(serviceId: interfaces.ServiceIdentifier<T>): readonly T[] {\n    return useContainer(\n        container => container.getAll(serviceId)\n    );\n}\n\n/**\n * uses container.getNamed(serviceIdentifier, named)\n * https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#containergetnamedtserviceidentifier-interfacesserviceidentifiert-named-string--number--symbol-t\n * https://github.com/inversify/InversifyJS/blob/master/wiki/named_bindings.md\n */\nexport function useNamedInjection<T>(serviceId: interfaces.ServiceIdentifier<T>, named: string | number | symbol): T {\n    return useContainer(\n        container => container.getNamed<T>(serviceId, named)\n    );\n}\n\n/**\n * uses container.getTagged(serviceIdentifier, key, value)\n * https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#containergettaggedtserviceidentifier-interfacesserviceidentifiert-key-string--number--symbol-value-unknown-t\n * https://github.com/inversify/InversifyJS/blob/master/wiki/tagged_bindings.md\n */\nexport function useTaggedInjection<T>(serviceId: interfaces.ServiceIdentifier<T>, key: string | number | symbol, value: unknown): T {\n    return useContainer(\n        container => container.getTagged<T>(serviceId, key, value)\n    );\n}\n","import { ComponentClass, Component, createContext } from 'react';\nimport { interfaces } from 'inversify';\n\ntype InversifyReactContextValue = interfaces.Container | undefined;\nconst InversifyReactContext = createContext<InversifyReactContextValue>(undefined);\nInversifyReactContext.displayName = 'InversifyReactContext';\n\n// @see https://reactjs.org/docs/context.html#classcontexttype\nconst contextTypeKey = 'contextType';\n\n// Object.defineProperty is used to associate data with objects (component classes and instances)\n// #DX: ES6 WeakMap could be used instead in the future when polyfill won't be required anymore\nconst AdministrationKey = '~$inversify-react';\n\n// internal data associated with component class\ntype DiClassAdministration = {\n\taccepts: boolean;\n}\n\n// internal data associated with component instance\ntype DiInstanceAdministration = {\n\tcontainer: interfaces.Container;\n\n\tproperties: { [key: string]: () => unknown };\n}\n\nfunction getClassAdministration(target: any) {\n\tlet administration: DiClassAdministration | undefined = target[AdministrationKey];\n\n\tif (!administration) {\n\t\tadministration = {\n\t\t\taccepts: false,\n\t\t};\n\n\t\tObject.defineProperty(target, AdministrationKey, {\n\t\t\tenumerable: false,\n\t\t\twritable: false,\n\t\t\tvalue: administration,\n\t\t});\n\t}\n\n\treturn administration;\n}\n\nfunction getInstanceAdministration(target: any): DiInstanceAdministration {\n\tlet administration: DiInstanceAdministration | undefined = target[AdministrationKey];\n\n\tif (!administration) {\n\t\tconst container = target.context as InversifyReactContextValue;\n\t\tif (!container) {\n\t\t\tthrow new Error('Cannot use resolve services without any providers in component tree.');\n\t\t}\n\n\t\tadministration = {\n\t\t\tcontainer,\n\t\t\tproperties: {},\n\t\t};\n\n\t\tObject.defineProperty(target, AdministrationKey, {\n\t\t\tenumerable: false,\n\t\t\twritable: false,\n\t\t\tvalue: administration,\n\t\t});\n\t}\n\n\treturn administration;\n}\n\nfunction ensureAcceptContext(target: ComponentClass) {\n\tconst administration = getClassAdministration(target);\n\n\tif (!administration.accepts) {\n\t\tconst { contextType } = target;\n\t\tconst componentName = target.displayName || target.name;\n\t\tif (contextType) {\n\t\t\tthrow new Error(\n\t\t\t\t'inversify-react cannot configure React context.\\n'\n\t\t\t\t+ `Component \\`${componentName}\\` already has \\`${contextTypeKey}: ${contextType.displayName || '<anonymous context>'}\\` defined.\\n`\n\t\t\t\t+ '@see inversify-react/test/resolve.tsx#limitations for more info and workarounds\\n'\n\t\t\t);\n\t\t}\n\n\t\tObject.defineProperty(target, contextTypeKey, {\n\t\t\tenumerable: true,\n\t\t\tget() {\n\t\t\t\treturn InversifyReactContext;\n\t\t\t},\n\t\t\tset(value: unknown) {\n\t\t\t\tif (value !== InversifyReactContext) {\n\t\t\t\t\t// warn users if they also try to use `contextType` of this component\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Cannot change \\`${contextTypeKey}\\` of \\`${componentName}\\` component.\\n`\n\t\t\t\t\t\t+ 'Looks like you are using inversify-react decorators, '\n\t\t\t\t\t\t+ 'which have already patched this component and use own context to deliver IoC container.\\n'\n\t\t\t\t\t\t+ '@see inversify-react/test/resolve.tsx#limitations for more info and workarounds\\n'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tadministration.accepts = true;\n\t}\n}\n\ntype PropertyOptions = Readonly<{\n\tisOptional?: boolean;\n\tisAll?: boolean;\n\tdefaultValue?: unknown;\n}>;\n\nfunction createProperty(target: Component, name: string, type: interfaces.ServiceIdentifier<unknown>, options: PropertyOptions) {\n\tObject.defineProperty(target, name, {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\tconst administration = getInstanceAdministration(this);\n\t\t\tlet getter = administration.properties[name];\n\n\t\t\tif (!getter) {\n\t\t\t\tconst { container } = administration;\n\n\t\t\t\tlet value: unknown;\n\t\t\t\tif (options.isAll) {\n\t\t\t\t\tif (options.isOptional && !container.isBound(type)) {\n\t\t\t\t\t\tvalue = [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = container.getAll(type);\n\t\t\t\t\t}\n\t\t\t\t} else if (options.isOptional) {\n\t\t\t\t\tif (container.isBound(type)) {\n\t\t\t\t\t\tvalue = container.get(type);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalue = options.defaultValue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalue = container.get(type);\n\t\t\t\t}\n\n\t\t\t\tgetter = administration.properties[name] = () => value;\n\t\t\t}\n\n\t\t\treturn getter();\n\t\t}\n\t});\n\n\tconst descriptor = Object.getOwnPropertyDescriptor(target, name);\n\tif (!descriptor)\n\t\tthrow new Error('Failed to define property');\n\n\treturn descriptor;\n}\n\nexport {\n\tInversifyReactContext,\n\tAdministrationKey,\n\tDiClassAdministration, DiInstanceAdministration,\n\tensureAcceptContext,\n\tcreateProperty, PropertyOptions,\n\tgetClassAdministration, getInstanceAdministration,\n};\n","import * as React from 'react';\nimport { useContext, useState } from 'react';\nimport { interfaces } from 'inversify';\nimport { InversifyReactContext } from './internal';\n\ntype ProviderProps = Readonly<{\n    // Inversify container (or container factory) to be used for that React subtree (children of Provider)\n    container: interfaces.Container | (() => interfaces.Container);\n\n    // Hierarchical DI configuration:\n    // standalone Provider will keep container isolated,\n    // otherwise (default behavior) it will try to find parent container in React tree\n    // and establish hierarchy of containers\n    // @see https://github.com/inversify/InversifyJS/blob/master/wiki/hierarchical_di.md\n    standalone?: boolean;\n\n    children?: React.ReactNode;\n\n    // TODO:ideas: more callbacks?\n    //  ---\n    //  `onReady?: (container: interfaces.Container) => void`\n    //  before first render, but when hierarchy is already setup (because parent container might be important ofc),\n    //  e.g. to preinit something, before it gets used by some components:\n    //  ```\n    //  onReady={container => {\n    //    // e.g. when container comes from business-logic-heavy external module, independent from UI (React),\n    //    // and requires a little bit of additional UI-based configuration\n    //    container.get(Foo).initBasedOnUI(...)\n    //  }}\n    //  ```\n    //  ---\n    //  `onParent?: (self: interfaces.Container, parent: interfaces.Container) => interfaces.Container`\n    //  middleware-like behavior where we could intercept parent container and interfere with hierarchy or something\n    //\n}>;\n\n// very basic typeguard, but should be enough for local usage\nfunction isContainer(x: ProviderProps['container']): x is interfaces.Container {\n\treturn 'resolve' in x;\n}\n\nconst Provider: React.FC<ProviderProps> = ({\n    children,\n    container: containerProp,\n    standalone: standaloneProp = false\n}) => {\n    // #DX: guard against `container` prop change and warn with explicit error\n    const [container] = useState(containerProp);\n    // ...but only if it's an actual Container and not a factory function (factory can be a new function on each render)\n\tif (isContainer(containerProp) && containerProp !== container) {\n\t\tthrow new Error(\n\t\t\t'Changing `container` prop (swapping container in runtime) is not supported.\\n' +\n\t\t\t'If you\\'re rendering Provider in some list, try adding `key={container.id}` to the Provider.\\n' +\n\t\t\t'More info on React lists:\\n' +\n\t\t\t'https://reactjs.org/docs/lists-and-keys.html#keys\\n' +\n\t\t\t'https://reactjs.org/docs/reconciliation.html#recursing-on-children'\n\t\t);\n\t}\n\n    // #DX: guard against `standalone` prop change and warn with explicit error\n    const [standalone] = useState(standaloneProp);\n    if (standaloneProp !== standalone) {\n        throw new Error(\n            'Changing `standalone` prop is not supported.' // ...does it make any sense to change it?\n        );\n    }\n\n    // we bind our container to parent container BEFORE first render,\n    // so that children would be able to resolve stuff from parent containers\n    const parentContainer = useContext(InversifyReactContext);\n    useState(function prepareContainer() {\n        if (!standalone && parentContainer) {\n            if (parentContainer === container) {\n                throw new Error(\n                    'Provider has found a parent container (on surrounding React Context), ' +\n                    'yet somehow it\\'s the same as container specified in props. It doesn\\'t make sense.\\n' +\n                    'Perhaps you meant to configure Provider as \\`standalone={true}\\`?'\n                );\n            }\n            if (container.parent && container.parent !== parentContainer) {\n                throw new Error(\n                    'Ambiguous containers hierarchy.\\n' +\n                    'Provider has found a parent for specified `container`, but it already has a different parent.\\n' +\n                    'Learn more at https://github.com/Kukkimonsuta/inversify-react/blob/v0.5.0/src/provider.tsx'\n                    // It is likely one of two:\n                    //\n                    // 1) If existing `container.parent` is not an accident (e.g. you already control hierarchy),\n                    //    then you should use `standalone` configuration\n                    //    <Provider container={myContainer} standalone={true}>\n                    //    so that inversify-react Provider won't try to set parent container (found on React Context)\n                    //\n                    // 2) Perhaps existing `container.parent` is an accident (???)\n                    //    and you actually would rather want to use container from surrounding React Context as parent,\n                    //    then you unset `container.parent` first.\n                    //\n                    // More info on hierarchical DI:\n                    // https://github.com/inversify/InversifyJS/blob/master/wiki/hierarchical_di.md'\n                );\n            }\n\n            container.parent = parentContainer;\n        }\n    });\n\n    return (\n        <InversifyReactContext.Provider value={container}>\n            {children}\n        </InversifyReactContext.Provider>\n    );\n};\n\nexport { ProviderProps, Provider };\nexport default Provider;\n","import { interfaces } from 'inversify';\nimport { ensureAcceptContext, createProperty, PropertyOptions } from './internal';\n\ninterface ResolveDecorator {\n\t(serviceIdentifier: interfaces.ServiceIdentifier<unknown>): (target: any, name: string, descriptor?: any) => any;\n\t(target: any, name: string, descriptor?: any): any\n\n\toptional: ResolveOptionalDecorator;\n\tall: ResolveAllDecorator;\n}\n\ninterface ResolveOptionalDecorator {\n\t<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>, defaultValue?: T): (target: any, name: string, descriptor?: any) => any;\n\t(target: any, name: string, descriptor?: any): any;\n\t\n\tall: ResolveAllDecorator;\n}\n\ninterface ResolveAllDecorator {\n\t<T>(serviceIdentifier: interfaces.ServiceIdentifier<T>): (target: any, name: string, descriptor?: any) => any;\n\t(target: any, name: string, descriptor?: any): any;\n}\n\nfunction applyResolveDecorator(target: any, name: string, type: interfaces.ServiceIdentifier<unknown>, options: PropertyOptions) {\n\tensureAcceptContext(target.constructor);\n\n\treturn createProperty(target, name, type, options);\n}\n\nfunction getDesignType(target: any, name: string) {\n\tif (!name) {\n\t\tthrow new Error('Decorator `resolve` failed to resolve property name');\n\t}\n\n\tif (!Reflect || !Reflect.getMetadata) {\n\t\tthrow new Error('Decorator `resolve` without specifying service identifier requires `reflect-metadata`');\n\t}\n\n\tconst type = Reflect.getMetadata('design:type', target, name);\n\tif (!type) {\n\t\tthrow new Error('Failed to discover property type, is `emitDecoratorMetadata` enabled?');\n\t}\n\n\treturn type;\n}\n\nconst resolve = <ResolveDecorator>function resolve(target: any, name: string, descriptor?: any) {\n\tif (typeof name !== 'undefined') {\n\t\tconst type = getDesignType(target, name);\n\n\t\t// decorator\n\t\treturn applyResolveDecorator(target, name, type, {});\n\t} else {\n\t\tconst serviceIdentifier = target as interfaces.ServiceIdentifier<unknown>;\n\t\tif (!serviceIdentifier) {\n\t\t\tthrow new Error('Invalid property type.');\n\t\t}\n\n\t\t// factory\n\t\treturn function(target: any, name: string, descriptor?: any) {\n\t\t\treturn applyResolveDecorator(target, name, serviceIdentifier, {});\n\t\t};\n\t}\n};\n\nresolve.optional = <ResolveOptionalDecorator>function resolveOptional<T>(...args: unknown[]) {\n\tif (typeof args[1] === 'string' && args.length === 3) {\n\t\tconst [target, name, descriptor] = args;\n\t\tconst type = getDesignType(target, name);\n\n\t\t// decorator\n\t\treturn applyResolveDecorator(target, name, type, { isOptional: true });\n\t} else {\n\t\tconst serviceIdentifier = args[0] as interfaces.ServiceIdentifier<T>;\n\t\tconst defaultValue = args[1] as T | undefined;\n\n\t\t// factory\n\t\treturn function(target: any, name: string, descriptor?: any) {\n\t\t\treturn applyResolveDecorator(target, name, serviceIdentifier, { isOptional: true, defaultValue });\n\t\t};\n\t}\n}\n\nresolve.all = <ResolveAllDecorator>function resolveAll<T>(...args: unknown[]) {\n\tif (typeof args[1] === 'string' && args.length === 3) {\n\t\tconst [target, name, descriptor] = args;\n\t\tconst type = getDesignType(target, name);\n\n\t\t// decorator\n\t\treturn applyResolveDecorator(target, name, type, { isAll: true });\n\t} else {\n\t\tconst serviceIdentifier = args[0] as interfaces.ServiceIdentifier<T>;\n\n\t\t// factory\n\t\treturn function(target: any, name: string, descriptor?: any) {\n\t\t\treturn applyResolveDecorator(target, name, serviceIdentifier, { isAll: true });\n\t\t};\n\t}\n}\n\nresolve.optional.all = <ResolveAllDecorator>function resolveAll<T>(...args: unknown[]) {\n\tif (typeof args[1] === 'string' && args.length === 3) {\n\t\tconst [target, name, descriptor] = args;\n\t\tconst type = getDesignType(target, name);\n\n\t\t// decorator\n\t\treturn applyResolveDecorator(target, name, type, { isAll: true });\n\t} else {\n\t\tconst serviceIdentifier = args[0] as interfaces.ServiceIdentifier<T>;\n\n\t\t// factory\n\t\treturn function(target: any, name: string, descriptor?: any) {\n\t\t\treturn applyResolveDecorator(target, name, serviceIdentifier, { isAll: true, isOptional: true });\n\t\t};\n\t}\n}\n\nexport { resolve };\nexport default resolve;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__12__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export { resolve } from './resolve';\nexport { Provider, ProviderProps } from './provider';\nexport {\n    useAllInjections,\n    useContainer,\n    useInjection,\n    useOptionalInjection,\n    useNamedInjection,\n    useTaggedInjection,\n} from './hooks';\n"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__12__","serviceId","useContainer","container","get","resolveDefault","isBound","getAll","named","getNamed","key","value","getTagged","resolve","resolveValue","ref","useContext","InversifyReactContext","Error","useRef","current","v","ensureAcceptContext","target","administration","getClassAdministration","accepts","contextType","displayName","name","contextTypeKey","Object","defineProperty","enumerable","set","createProperty","type","options","getInstanceAdministration","getter","properties","isAll","isOptional","defaultValue","descriptor","getOwnPropertyDescriptor","createContext","undefined","AdministrationKey","writable","context","Provider","children","containerProp","standalone","standaloneProp","useState","parentContainer","parent","applyResolveDecorator","constructor","getDesignType","Reflect","getMetadata","optional","args","length","all","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","useAllInjections","useInjection","useOptionalInjection","useNamedInjection","useTaggedInjection"],"sourceRoot":""}